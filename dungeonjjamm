#!/usr/bin/python3

# Joint effort by: Jerry Smedley, Jacob Hilt, Melissa Barnes, Mark Montes, Anthony Chin
# This work is made available under the "MIT License". Please see the file LICENSE in this distribution for license terms.
# This is our main executable, this will pull functions from the other files to run all of them here
# *****PLEASE MAKE SURE TERMINAL IS AT LEAST 120x30 SIZE FOR PROPER PERFORMANCE*****

from src.start_menu import *
import os
import src.mapfi
import src.menu
import src.player
from src.nonClassFuncs import *
import time
from src.endscreen import *


def main():
    mode = start_menu()
    if mode == 'Start':
        path = 'levels'
    elif mode == 'Tutorial':
        path = 'tutorials'
    elif mode == 'Load Custom':
        path = input('input the directory name: ')
    elif mode == 'Quit':
        curses.endwin()
        return

    path = './src/AllLevels/' + path
    if not os.path.isdir(path):
        return
    inFile = []
    mapArr = []

    # https://careerkarma.com/blog/python-list-files-in-directory/
    for root, directories, files in os.walk(path, topdown=False):
        for name in files:
            inFile.append(os.path.join(root, name))
        for name in directories:
            inFile.append(os.path.join(root, name))
    inFile.sort(key=natural_keys)

    fileNum = 0
    while fileNum < len(inFile):
        mapArr.append(src.mapfi.Map())
        playerY, playerX = mapArr[fileNum].loadMap(inFile[fileNum])
        mapArr[fileNum].loadExits()
        mapArr[fileNum].loadEnemy()
        fileNum += 1

    fileNum = 0
    while fileNum < len(mapArr):
        mapArr[fileNum].setupMap()
        fileNum += 1

    fileNum = 0
    newMap = 0
    menuObj = src.menu.Menu()
    playObj = src.player.Player()
    enemyTime = time.time()

    while 0 <= fileNum < len(inFile):
        playObj.y_pos = mapArr[fileNum].startY
        playObj.x_pos = mapArr[fileNum].startX
        mapArr[fileNum].displayMap()
        menuObj.display_menu(mapArr[fileNum].maxX + 2, playObj, mapArr[fileNum])
        mapArr[fileNum].stdscr.nodelay(False)
        while True:
            c = mapArr[fileNum].stdscr.getch()

            if c != -1:
                mapArr[fileNum].stdscr.nodelay(True)
                if c == ord('q'):  # or c == ord('n'): # Dev feature, allowed skipping levels
                    if (fileNum + 1) < len(inFile):
                        fileNum += 1
                    else:
                        fileNum = -1
                    break
                else:
                    newMap = game(c, playObj, mapArr[fileNum], mapArr, fileNum)
                    menuObj.display_menu(mapArr[fileNum].maxX + 2, playObj, mapArr[fileNum])

            # Enemy movement
            currTime = time.time()
            if currTime - enemyTime >= 2:
                for enemy in mapArr[fileNum].enemyArr:
                    check = enemy.movement(mapArr[fileNum])
                    if check[0] == 2:
                        mapArr[fileNum].reset(playObj)
                enemyTime = time.time()
                mapArr[fileNum].displayMap()
                menuObj.display_menu(mapArr[fileNum].maxX + 2, playObj, mapArr[fileNum])

            # https://stackoverflow.com/questions/2259228/how-are-booleans-formatted-in-strings-in-python
            if isinstance(newMap, int):
                if newMap > fileNum:
                    mapArr[fileNum].winCond = 'T'
                mapArr[fileNum].stdscr.clear()
                fileNum = newMap
                break

        if c == ord('q'):  # or c == ord('n'): # Dev feature, allowed skipping levels
            mapArr[fileNum].stdscr.clear()
            mapArr[fileNum].stdscr.refresh()
            break

    if fileNum >= len(inFile):
        fileNum = 0
        end_screen(mapArr[fileNum].stdscr, playObj, menuObj)

    curses.nocbreak()
    mapArr[fileNum].stdscr.keypad(False)
    curses.echo()
    curses.endwin()


if __name__ == "__main__":
    main()
