#!/usr/bin/python3

# Joint effort by: Jerry Smedley, Jacob Hilt, Melissa Barnes, Mark Montes, Anthony Chin
# This work is made available under the "MIT License". Please see the file LICENSE in this distribution for license terms.
# This is our main executable, this will pull functions from the other files to run all of them here
# *****PLEASE MAKE SURE TERMINAL IS AT LEAST 120x30 SIZE FOR PROPER PERFORMANCE****

import curses
import os
from os import path
import src.mapfi


def newFile(userPath):
    width = input('Enter the width: ')
    height = input('Enter the height: ')
    while not width.isnumeric():
        print('Width not int, enter integer for width.')
        width = input('Enter the width: ')
    while not height.isnumeric():
        print('Height not int, enter integer for height.')
        height = input('Enter the height: ')
    width = int(width)
    height = int(height)
    stdscr = curses.initscr()
    if width > curses.COLS - 1 + 20:
        width = curses.COLS - 1 - 20
    if height > curses.LINES - 1:
        height = curses.LINES - 1
    curses.endwin()
    if height < 3:
        height = 3
    if width < 3:
        width = 3

    dashes = '-' * width
    dashes += '\n'
    fi = open(userPath, 'w')
    for num in range(height):
        fi.write(dashes)
    fi.write('\n')
    fi.write('T')
    fi.close()


def moveCursor(c, y, x, mapObj):
    mapObj.objArr[y][x] = mapObj.initArr[y][x]
    if c == curses.KEY_LEFT:
        if x != 0:
            x -= 1
    elif c == curses.KEY_RIGHT:
        if x != mapObj.maxX - 1:
            x += 1
    elif c == curses.KEY_UP:
        if y != 0:
            y -= 1
    elif c == curses.KEY_DOWN:
        if y != mapObj.maxY - 1:
            y += 1

    mapObj.objArr[y][x] = 'c'
    mapObj.displayMap()
    return y, x


def isValid(c, mapObj, y, x):
    if c == '-' or c == 'w' or c == 's' \
            or c == 'b' or c == 'h' or \
            c == 'k' or c == 'p' or c.isnumeric() \
            or c.isupper():
        if mapObj.initArr[y][x] == 'e':
            removeE(mapObj, y, x)
        elif mapObj.initArr[y][x].isnumeric() and (not c.isnumeric()) \
                and mapObj.exitArr[y][x] >= 0:
            mapObj.exitArr[y][x] = -1
        mapObj.initArr[y][x] = c


def removeE(mapObj, y, x):
    if x + 1 < mapObj.maxX:
        x += 1
        while x < mapObj.maxX and mapObj.initArr[y][x].isnumeric():
            mapObj.exitArr[y][x] = -1
            x += 1
        if mapObj.initArr[y][x] == 'e':
            mapObj.initArr[y][x] == '-'


def winValid(mapObj):
    if mapObj.winCond == 'T' or mapObj.winCond == 'S' \
            or mapObj.winCond == 'E' or mapObj.winCond == 'B' \
            or mapObj.winCond == 'K' or mapObj.winCond == 'H':
        return True
    return False


def main():
    userPath = './src/AllLevels/' + input('input the directory name (ex: levels) or q to quit: ')
    if userPath == './src/AllLevels/q':
        return
    while not path.isdir(userPath):
        print('directory ', userPath, ' not found. Please enter an existing directory')
        userPath = './src/AllLevels/' + input('input the directory name or q to quit: ')
        if userPath == './src/AllLevels/q':
            return

    fileName = input('Please input the file name (ex: lv0.txt): ')
    userPath += '/' + fileName
    if not path.exists(userPath):
        newFile(userPath)
    mapObj = src.mapfi.Map()
    mapObj.setupMap()
    mapObj.stdscr.nodelay(False)
    mapObj.loadMap(userPath)
    if mapObj.maxX > curses.COLS - 1 - 20 or mapObj.maxY > curses.LINES - 1:
        curses.endwin()
        print('This file is too large. Please remake the file.')
        newFile(userPath)
        mapObj.loadMap(userPath)
    mapObj.loadExits()
    y = 0
    x = 0
    mapObj.objArr[y][x] = 'c'
    mapObj.stdscr.addstr(0, mapObj.maxX + 2, 'Arrows: Move', curses.color_pair(7))
    mapObj.stdscr.addstr(1, mapObj.maxX + 2, 'w: Wall', curses.color_pair(7))
    mapObj.stdscr.addstr(2, mapObj.maxX + 2, '-: Blank', curses.color_pair(7))
    mapObj.stdscr.addstr(3, mapObj.maxX + 2, 'p: Player', curses.color_pair(7))
    mapObj.stdscr.addstr(4, mapObj.maxX + 2, 'k: Key', curses.color_pair(7))
    mapObj.stdscr.addstr(5, mapObj.maxX + 2, 's: Sword', curses.color_pair(7))
    mapObj.stdscr.addstr(6, mapObj.maxX + 2, 'b: Bow', curses.color_pair(7))
    mapObj.stdscr.addstr(7, mapObj.maxX + 2, 'h: Shuriken', curses.color_pair(7))
    mapObj.stdscr.addstr(8, mapObj.maxX + 2, 'Number: Enemy', curses.color_pair(7))
    mapObj.stdscr.addstr(10, mapObj.maxX + 2, 'Place e next to', curses.color_pair(7))
    mapObj.stdscr.addstr(11, mapObj.maxX + 2, 'number to convert', curses.color_pair(7))
    mapObj.stdscr.addstr(12, mapObj.maxX + 2, 'it to exit.', curses.color_pair(7))
    mapObj.stdscr.addstr(13, mapObj.maxX + 2, 'q: Quit', curses.color_pair(7))
    mapObj.stdscr.addstr(14, mapObj.maxX + 2, 'Uppercase: Text', curses.color_pair(7))

    while True:
        mapObj.displayMap()

        c = mapObj.stdscr.getch()
        if c == ord('q'):
            break

        elif c == curses.KEY_LEFT or c == curses.KEY_RIGHT or c == curses.KEY_UP or c == curses.KEY_DOWN:
            y, x = moveCursor(c, y, x, mapObj)

        elif c == ord('e'):
            if x < mapObj.maxX - 1:
                if mapObj.initArr[y][x + 1].isnumeric():
                    xDest = x + 1
                    while xDest < mapObj.maxX - 1 and mapObj.initArr[y][xDest].isnumeric():
                        mapObj.exitArr[y][xDest] = 0
                        xDest += 1

                    mapObj.objArr[y][x] = 'e'
                    mapObj.initArr[y][x] = 'e'
                    mapObj.objArr[y][x] = 'c'
                    mapObj.initArr[y][xDest] = 'e'
                    x = xDest
                    moveCursor(c, y, x, mapObj)

        else:
            # https://stackoverflow.com/questions/36319228/python-3-4-getch-a-typewriter-python
            isValid(chr(c), mapObj, y, x)

        curses.flushinp()

    curses.nocbreak()
    mapObj.stdscr.keypad(False)
    curses.echo()
    curses.endwin()

    mapObj.winCond = input('Please enter a win condition (ex: T): ')
    if not winValid(mapObj):
        mapObj.winCond = 'T'
    fi = open(userPath, 'w')
    for y in range(mapObj.maxY):
        for x in range(mapObj.maxX):
            if mapObj.initArr[y][x] == 'e':
                if x - 1 >= 0:
                    if not mapObj.initArr[y][x - 1].isnumeric():
                        ex = x
                        if x + 1 < mapObj.maxX:
                            ex = x + 1
                            if mapObj.initArr[y][ex] == 'e':
                                mapObj.initArr[y][x] = '-'
                            while mapObj.initArr[y][ex] != 'e' and ex < mapObj.maxX:
                                if not mapObj.initArr[y][ex].isnumeric():
                                    mapObj.initArr[y][x] = '-'
                                    break
                                ex += 1
                        else:
                            mapObj.initArr[y][x] = '-'
                    elif mapObj.exitArr[y][x - 1] < 0:
                        mapObj.initArr[y][x] = '-'

            fi.write(mapObj.initArr[y][x])
        fi.write('\n')
    fi.write('\n')
    fi.write(mapObj.winCond)


if __name__ == "__main__":
    main()
